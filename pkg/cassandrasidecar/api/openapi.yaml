openapi: 3.0.3
info:
  contact:
    email: support@instaclustr.com
  description: REST API for Cassandra Sidecar from Instaclustr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://github.com/instaclustr/cassandra-sidecar
  title: Instaclustr Cassandra Sidecar
  version: 1.1.0
externalDocs:
  description: Find out more about Cassandra Sidecar
  url: https://github.com/instaclustr/cassandra-sidecar
servers:
- description: Default URL a Sidecar is bound to when run alongside with Cassandra
    node
  url: localhost:4567
tags:
- description: Operations against Cassandra node
  name: operations
- description: Configuration of Cassandra as in cassandra.yaml
  name: config
- description: Status of Cassandra node
  name: status
- description: Endpoints for various versions
  name: version
paths:
  /operations:
    get:
      parameters:
      - description: type of operations to filter on
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            enum:
            - cleanup
            - decommission
            - drain
            - flush
            - rebuild
            - refresh
            - scrub
            - upgradesstables
            - import
            - truncate
            - backup
            - restore
            type: string
          type: array
        style: form
      - description: status of operations to filter on
        explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            enum:
            - PENDING
            - RUNNING
            - COMPLETED
            - CANCELLED
            - FAILED
            type: string
          type: array
        style: form
      responses:
        200:
          description: Gets all operations submitted to this Sidecar, irrelevant of
            their state
      summary: All operations of Sidecar
      tags:
      - operations
    post:
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                mapping:
                  cleanup: '#/components/schemas/CleanupOperationRequest'
                  decommission: '#/components/schemas/DecommissionOperationRequest'
                  drain: '#/components/schemas/DrainOperationRequest'
                  flush: '#/components/schemas/FlushOperationRequest'
                  rebuild: '#/components/schemas/RebuildOperationRequest'
                  refresh: '#/components/schemas/RefreshOperationRequest'
                  restart: '#/components/schemas/RestartOperationRequest'
                  scrub: '#/components/schemas/ScrubOperationRequest'
                  upgradesstables: '#/components/schemas/UpgradeSSTablesOperationRequest'
                  import: '#/components/schemas/ImportOperationRequest'
                  truncate: '#/components/schemas/TruncateOperationRequest'
                  backup: '#/components/schemas/BackupOperationRequest'
                  restore: '#/components/schemas/RestoreOperationRequest'
                propertyName: type
              oneOf:
              - $ref: '#/components/schemas/CleanupOperationRequest'
              - $ref: '#/components/schemas/DecommissionOperationRequest'
              - $ref: '#/components/schemas/DrainOperationRequest'
              - $ref: '#/components/schemas/FlushOperationRequest'
              - $ref: '#/components/schemas/RebuildOperationRequest'
              - $ref: '#/components/schemas/RefreshOperationRequest'
              - $ref: '#/components/schemas/RestartOperationRequest'
              - $ref: '#/components/schemas/ScrubOperationRequest'
              - $ref: '#/components/schemas/UpgradeSSTablesOperationRequest'
              - $ref: '#/components/schemas/ImportOperationRequest'
              - $ref: '#/components/schemas/TruncateOperationRequest'
              - $ref: '#/components/schemas/BackupOperationRequest'
              - $ref: '#/components/schemas/RestoreOperationRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CleanupOperationResponse'
                - $ref: '#/components/schemas/DecommissionOperationResponse'
                - $ref: '#/components/schemas/DrainOperationResponse'
                - $ref: '#/components/schemas/FlushOperationResponse'
                - $ref: '#/components/schemas/RebuildOperationResponse'
                - $ref: '#/components/schemas/RefreshOperationResponse'
                - $ref: '#/components/schemas/RestartOperationResponse'
                - $ref: '#/components/schemas/ScrubOperationResponse'
                - $ref: '#/components/schemas/UpgradeSSTablesOperationResponse'
                - $ref: '#/components/schemas/ImportOperationResponse'
                - $ref: '#/components/schemas/TruncateOperationResponse'
                - $ref: '#/components/schemas/BackupOperationResponse'
                - $ref: '#/components/schemas/RestoreOperationResponse'
          description: By calling this endpoint an operation is submitted for its
            execution
      summary: Submits an operation to this Sidecar
      tags:
      - operations
  /operations/{operationId}:
    get:
      parameters:
      - description: ID of operation to return
        explode: false
        in: path
        name: operationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          description: Returns a submitted operation
        404:
          description: Return code in case there is not any operation under such operationId
      summary: abc
      tags:
      - operations
  /version:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidecarVersion'
          description: Cassandra Sidecar version response object
      summary: returns version of Cassandra Sidecar itself
      tags:
      - version
  /version/sidecar:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SidecarVersion'
          description: Cassandra Sidecar version response object
      summary: alias for /version endpoint, returns version of Cassandra Sidecar itself
      tags:
      - version
  /version/cassandra:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CassandraVersion'
          description: Cassandra version response object
      summary: returns version of Cassandra node
      tags:
      - version
  /version/schema:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CassandraSchemaVersion'
          description: Version of Cassandra schema
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CassandraSchemaVersionException'
          description: response with exception causing this server error
      summary: returns schema version this Cassandra node is on, same as calling StorageServiceMBean#getSchemaVersion
      tags:
      - version
  /config:
    get:
      responses:
        200:
          description: Configuration of Cassandra node as in /var/lib/cassandra
        404:
          description: cassandra.yaml file was not found in /var/lib/cassandra
        500:
          description: Unable to read cassandra.yaml file
      summary: returns configuration of a Cassandra node as in its cassandra.yaml
        file
      tags:
      - config
  /status:
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CassandraStatus'
          description: returns a state of a Cassandra node
        500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CassandraStatusException'
          description: returns exception causing this server error
      summary: returns a state of a Cassandra node
      tags:
      - status
components:
  schemas:
    CleanupOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/CleanupOperationRequest'
      type: object
    DecommissionOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/DecommissionOperationRequest'
      type: object
    DrainOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/DrainOperationRequest'
      type: object
    FlushOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/FlushOperationRequest'
      type: object
    RebuildOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/RebuildOperationRequest'
      type: object
    RefreshOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/RefreshOperationRequest'
      type: object
    RestartOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/RestartOperationRequest'
      type: object
    ScrubOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/ScrubOperationRequest'
      type: object
    UpgradeSSTablesOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/UpgradeSSTablesOperationRequest'
      type: object
    ImportOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/ImportOperationRequest'
      type: object
    TruncateOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/TruncateOperationRequest'
      type: object
    BackupOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/BackupOperationRequest'
      type: object
    RestoreOperationResponse:
      allOf:
      - $ref: '#/components/schemas/BaseOperation'
      - $ref: '#/components/schemas/RestoreOperationRequest'
      type: object
    BaseOperation:
      properties:
        type:
          description: |
            type of operation, each operation has to have its type - based on this type, type of operation reflects type of request submitted, these types are always same.
          type: string
        id:
          description: |
            unique identifier of an operation, a random id is assigned to each operation after a request is submitted, from caller's perspective, an id is sent back as a response to his request so he can further query state of that operation, referencing id, by operations/{id} endpoint
          type: string
        state:
          description: |
            state of an operation, operation might be in various states, PENDING - this operation is pending for being submitted. RUNNING - this operation is actively doing its job, COMPLETED - this operation has finished successfully, CANCELLED - this operation was interrupted while being run, FAILED - this operation has finished errorneously
          enum:
          - PENDING
          - RUNNING
          - COMPLETED
          - CANCELLED
          - FAILED
          type: string
        progress:
          description: |
            float from 0.0 to 1.0, 1.0 telling that operation is completed, either successfully or with errors.
          format: float
          type: string
        creationTime:
          description: |
            timestamp telling when this operation was created on Sidecar's side
          format: date-time
          type: string
        startTime:
          description: |
            timestamp telling when this operation was started by Sidecar, if an operation is created, it does not necessarily mean that it will be started right away, in most cases it is the case but if e.g. ExecutorService is full on its working thread, an execution of an operation is postponed and start time is updated only after that
          format: date-time
          type: string
        completionTime:
          description: |
            timestamp telling when an operation has finished, irrelevant of its result, an operation can be failed and it would still have this field populated.
          format: date-time
          type: string
        failureCause:
          description: |
            This field contains serialized java.lang.Throwable in case this operation has failed
          type: object
      readOnly: true
      required:
      - creationTime
      - id
      - progress
      - state
      - type
      type: object
    BackupOperationRequest:
      example: |
        {
          "type": "backup",
          "storageLocation": gcp://bucket/cluster/dc/node,
          "snapshotTag": "hello",
          "entities": "abc.def"
        }
      properties:
        type:
          description: |
            type of operation, one has to set it to 'backup' in case he wants this request to be considered as a backup one
          type: string
        storageLocation:
          description: |
            location where SSTables will be uploaded. A value of the storageLocation property has to have exact format which is 'protocol://bucket/clusterName/dcName/nodeName'. protocol is either 'gcp', 's3', 'azure' or 'file:/'. For global requests, dcName and nodeName are changed automatically as these values are read from Cassandra and storageLocation is updated automatically for every node a specific backup request will be submitted to so the value of dcName and nodeName is irrelevant for global requests as they will be modified every time, a bucket does not need to exist, it will be created automatically if it does not, clusterName has to be specified. There might be automatic resolution of clusterName in the future however for now, one has to supply this property on his own.
          example: |
            gcp://myBucket/dev-cluster/dc1/node1
          type: string
        cassandraDirectory:
          description: |
            directory of Cassandra, by default it is /var/lib/cassandra, in this path, one expects there is 'data' directory
          example: /var/lib/cassandra
          type: string
        duration:
          description: |
            Based on this field, there will be throughtput per second computed based on what size data we want to upload we have. The formula is "size / duration". The lower the duration is, the higher throughput per second we will need and vice versa. This will influence e.g. responsiveness of a node to its business requests so one can control how much bandwidth is used for backup purposes in case a cluster is fully operational. The format of this field is "amount unit". 'unit' is just a (case-insensitive) java.util.concurrent.TimeUnit enum value. If not used, there will not be any restrictions as how fast an upload can be.
          example: |
            1 hour
          type: string
        bandwidth:
          $ref: '#/components/schemas/DataRate'
        concurrentConnections:
          description: |
            number of threads used for upload, there might be at most so many uploading threads at any given time, when not set, it defaults to 10
          type: integer
        lockFile:
          description: |
            path to file which will be used for locking the critical logic dealing with backups, this locking is done by locking a file on a file system so other execution will not proceed until the former one has finished. By default, this path is System.getProperty("java.io.tmpdir") + "/global-transfer-lock".
          type: string
        snapshotTag:
          description: |
            name of snapshot to make so this snapshot will be uploaded to storage location. If not specified, the name of snapshot will be automatically generated and it will have name 'autosnap-milliseconds-since-epoch'
          example: mySnapshot
          type: string
        dc:
          description: |
            name of datacenter to backup, nodes in the other datacenter(s) will not be involved
          example: dc1
          type: string
        entities:
          description: database entities to backup, it might be either only keyspaces
            or only tables (from different keyspaces if needed), e.g. 'k1,k2' if one
            wants to backup whole keyspaces and 'ks1.t1,ks2,t2' if one wants to backup
            tables. These formats can not be used together so 'k1,k2.t2' is invalid.
            If this field is empty, all keyspaces are backed up.
          example: ks1,ks2
          type: string
        k8sNamespace:
          description: |
            name of Kubernetes namespace to fetch Kubernetes secret for backups from, when not specified, it defaults to 'default'
          type: string
        k8sBackupSecretName:
          description: |
            name of Kubernetes secret from which credentials used for the communication to cloud storage providers are read, if not specified, secret name to be read will be automatically derived in form 'cassandra-backup-restore-secret-cluster-{name-of-cluster}'. These secrets are used only in case protocol in storageLocation is gcp, azure or s3.
          type: string
        globalRequest:
          description: |
            flag saying if this request is meant to be global or not, once a global backup request is submitted to Sidecar, it will coordinate backup for all other nodes in a cluster (including itself) so from a point of view of a caller, one might just backup whole cluster by one request and repeatedly query its status based on returned operation id.
          type: boolean
      required:
      - storageLocation
      - type
      type: object
    RestoreOperationRequest:
      example:
        type: restore
        cassandraDirectory: /var/lib/cassandra
        cassandraConfigDirectory: /var/lib/cassandra
        storageLocation: gcp://bucket/cluster/dc/node
        snapshotTag: hello
        entities: abc.def
        restorationStrategyType: hardlinks
        restorationPhase: download
        import:
          type: import
          sourceDir: /var/lib/cassandra/data/downloadedsstables
        globalRequest: "true"
      properties:
        type:
          description: |
            type of operation, one has to set it to 'restore' in case he wants this request to be considered as a backup one
          type: string
        storageLocation:
          description: |
            similar to field in backup request but used for telling from where files should be downloaded, not uploaded, in case globalRequest field is set to true, it does not matter what dc and node id is used, these components in storageLocation path will be automatically changed.
          type: string
        concurrentConnections:
          description: |
            similar to field in backup request but used for downloading files, not uploading them
          type: integer
        lockFile:
          description: |
            similar to field in backup request
          type: string
        cassandraDirectory:
          description: |
            similar to field in backup request
          type: string
        cassandraConfigDirectory:
          description: |
            directory where one expects to find 'conf/cassandra.yaml' file in case we need to update it with initial tokens in case restoration strategy is IN_PLACE.
          type: string
        restoreSystemKeyspace:
          description: |
            a flag saying if we should restore system keyspaces as well, relevant only for IN_PLACE restoration
          type: boolean
        snapshotTag:
          description: |
            name of snapshot to restore
          type: string
        entities:
          description: |
            similar to field in backup request, when empty, all entities in given snapshot will be restored
          type: string
        updateCassandraYaml:
          description: |
            flag telling if cassandra.yaml should be updated with initial_tokens, relevant only in case of IN_PLACE strategy
          type: boolean
        restorationStrategyType:
          description: |
            strategy telling how we should go about restoration, please refer to details in backup and sidecar documentation
          enum:
          - IN_PLACE
          - HARDLINKS
          - IMPORT
          type: string
        restorationPhase:
          description: |
            phase telling what should we do, this field has to be set just once as DOWNLOAD if globalRequest if true and coordinator of that request will take care of all other phases automatically on its own
          enum:
          - DOWNLOAD
          - TRUNCATE
          - IMPORT
          - CLEANUP
          type: string
        noDeleteTruncates:
          description: |
            flag saying if we should not delete truncated SSTables after they are imported, as part of CLEANUP phase, defaults to false
          type: boolean
        noDeleteDownloads:
          description: |
            flag saying if we should not delete downloaded SSTables from remote location, as part of CLEANUP phase, defaults to false
          type: boolean
        noDownloadData:
          description: |
            flag saying if we should not download data from remote location as we expect them to be there already, defaults to false, setting this to true has sense only in case noDeleteDownloads was set to true in previous restoration requests
          type: boolean
        schemaVersion:
          description: |
            version of schema we want to restore from, upon backup, a schema version is automatically appended to snapshot name and its manifest is uploaded under that name. In case we have two snapshots having same name, we might distinguish between them by this schema version. If schema version is not specified, we expect that there will be one and only one backup taken with respective snapshot name. This schema version has to match the version of a Cassandra node we are doing restore for (hence, by proxy, when global request mode is used, all nodes have to be on exact same schema version).
          type: string
        exactSchemaVersion:
          description: |
            flag saying if we indeed want a schema version of a running node match with schema version a snapshot is taken on. there might be cases when we want to restore a table for which its CQL schema has not changed but it has changed for other table / keyspace but a schema for that node has changed by doing that.
          type: boolean
        import:
          allOf:
          - $ref: '#/components/schemas/ImportOperationRequest'
        globalRequest:
          description: |
            flag saying that this request is a global one, meaning that a Sidecar this request is sent to will act as a restoration coordinator sending all other requests to each node in a cluster, for each phase.
          type: boolean
      required:
      - snapshotTag
      - storageLocation
      - type
      type: object
    ImportOperationRequest:
      description: |
        object used upon restoration, keyspace and table fields do not need to be set when restoration strategy type is IMPORT or HARDLINKS as this object will be initialised for each entities entry with right keyspace and table. 'sourceDir' property is used for pointing to a directory where we expect to find downloaded SSTables. This in turn means that all SSTables and other meta files will be downloaded into this directory (from which they will be fed to CFSMB). All other fields are taken from ColumnFamilyStoreMBean#importNewSSTables.
      properties:
        type:
          description: |
            has to be set to 'import'
          type: string
        keyspace:
          type: string
        table:
          type: string
        sourceDir:
          type: string
        keepLevel:
          type: boolean
        keepRepaired:
          type: boolean
        noVerify:
          type: boolean
        noVerifyTokens:
          type: boolean
        noInvalidateCaches:
          type: boolean
        quick:
          description: |
            defaults to false, if true, noVerifyTokens, noInvalidateCaches and noVerify will be set to true automatically
          type: boolean
        extendedVerify:
          type: boolean
      required:
      - sourceDir
      - type
      type: object
    CleanupOperationRequest:
      description: |
        triggers the immediate cleanup of keys no longer belonging to a node. By default, clean all keyspaces.
      properties:
        type:
          type: string
        keyspace:
          description: |
            keyspace to cleanup
          type: string
        tables:
          description: |
            tables to cleanup, when not specified, all tables in a keyspace will be cleaned up
          items:
            type: string
          type: array
        jobs:
          description: |
            number of jobs to use, never uses more that concurrent_compactor threads
          type: integer
      required:
      - keyspace
      - type
      type: object
    DecommissionOperationRequest:
      description: |
        decommissions a Cassandra node
      properties:
        type:
          type: string
        force:
          description: |
            forcibly decommission a node, even if by doing so there will not be enough replicas for responding to requests, this option is relevant only for Cassandra 4.x and it is not in use for lower versions, defaults to false.
          type: boolean
      required:
      - type
      type: object
    DrainOperationRequest:
      description: |
        drain a node, this operation will be successful only in case a node is in state NORMAL, when a node was already drained or it is in the middle of draining, this operation returns immediately.
      properties:
        type:
          type: string
      required:
      - type
      type: object
    FlushOperationRequest:
      description: |
        flushes tables of a keyspace or all tables of a keyspace when tables are not specified
      properties:
        type:
          type: string
        keyspace:
          description: |
            keyspace to flush
          type: string
        tables:
          description: |
            tables to flush, if not provided or empty, flush all tables in a keyspace
          items:
            type: string
          type: array
      required:
      - keyspace
      - type
      type: object
    RebuildOperationRequest:
      description: |
        rebuilds data by streaming from other nodes,
      properties:
        type:
          type: string
        keyspace:
          description: |
            specific keyspace to rebuild, if not specified, all keyspaces are rebuilt
          type: string
        sourceDC:
          description: |
            name of DC from which to select sources for streaming, by default, pick any DC
          type: string
        specificTokens:
          description: |
            rebuild specific token ranges
          items:
            $ref: '#/components/schemas/TokenRange'
          type: array
        specificSources:
          description: |
            specify hosts that this node should stream from when specificTokens are used
          items:
            type: string
          type: array
      required:
      - type
      type: object
    DataRate:
      description: |
        bandwidth used during uploads
      properties:
        value:
          description: |
            quantified value of bandwidth, an integer
          type: integer
        unit:
          description: |
            unit of 'data bandwidth'
          enum:
          - BPS
          - KBPS
          - MBPS
          - GBPS
          type: string
      required:
      - description
      - unit
      type: object
    TokenRange:
      properties:
        start:
          description: |
            starting token of a range
          type: string
        end:
          description: |
            ending token of a range
          type: string
      required:
      - end
      - start
      type: object
    RefreshOperationRequest:
      description: |
        refreshes a table, this is done by calling StorageServiceMBean#loadNewSSTables
      properties:
        type:
          type: string
        keyspace:
          description: |
            keyspace to refresh
          type: string
        table:
          description: |
            table to refresh
          type: string
      required:
      - keyspace
      - table
      - type
      type: object
    RestartOperationRequest:
      description: |
        restarts a Cassandra node this Sidecar talks to. This operation will be successfully carried out only in case both Cassandra node as well as this Sidecar are running in Kubernetes. There is an assumption that Cassandra node and Sidecar are running in separate Docker containers as part of the same Kubernetes Pod. The restart is done by executing "/bin/kill 1" of Cassandra container where pid 1 stands for Cassandra process. The logic behind restart is that Kubernetes detects that container has finished and it will start it again on its own. Before Cassandra node is stopped, it is drained first so there are not any requests comming to this node whatsover hence restart is safe.
      properties:
        type:
          type: string
      required:
      - type
      type: object
    ScrubOperationRequest:
      properties:
        type:
          type: string
        keyspace:
          description: |
            keyspace to scrub
          type: string
        tables:
          description: |
            tables to scrub, empty or not provided will scrub all tables in respective keyspace
          items:
            type: string
          type: array
        jobs:
          description: |
            number of sstables to scrub simultanously, set to 0 to use all available compaction threads
          type: integer
        disableSnapshot:
          description: |
            scrubbed CFs will be snapshotted first, defaults to false
          type: boolean
        skipCorrupted:
          description: |
            skip corrupted partitions even when scrubbing counter tables, defaults to false
          type: boolean
        noValidate:
          description: |
            do not validate columns using column validator, defaults to false
          type: boolean
        reinsertOverflowedTTL:
          description: |
            Rewrites rows with overflowed expiration date affected by CASSANDRA-14092 with the maximum supported expiration date of 2038-01-19T03:14:06+00:00. The rows are rewritten with the original timestamp incremented by one millisecond to override/supersede any potential tombstone that may have been generated during compaction of the affected rows.
          type: boolean
      required:
      - keyspace
      - type
      type: object
    UpgradeSSTablesOperationRequest:
      properties:
        type:
          type: string
        keyspace:
          description: |
            keyspace to upgrade SSTables of
          type: string
        tables:
          description: |
            an array of tables to upgrade SSTables of, empty or not provided array will default to upgrading of SSTables of all tables in respective keyspace
          items:
            type: string
          type: array
        jobs:
          description: |
            the number of threads to use - 0 means use all available, it never uses more than concurrent_compactor threads
          type: integer
        includeAllSStables:
          description: include all sstables, even those already on the current version,
            defaults to false
          type: boolean
      required:
      - keyspace
      - type
      type: object
    TruncateOperationRequest:
      properties:
        type:
          type: string
        keyspace:
          description: keyspace to truncate
          type: string
        table:
          description: table to truncate
          type: string
      required:
      - keyspace
      - table
      - type
      type: object
    CassandraVersion:
      example:
        patch: 7
        dsePatch: -1
        major: 3
        minor: 11
        preReleaseLabels:
        - SNAPSHOT
      properties:
        major:
          example: 3
          type: integer
        minor:
          example: 11
          type: integer
        patch:
          example: 7
          type: integer
        dsePatch:
          example: -1
          type: integer
        preReleaseLabels:
          description: Labels for Cassandra version, e.g. SNAPSHOT
          example:
          - SNAPSHOT
          items:
            type: string
          type: array
      type: object
    SidecarVersion:
      example:
        gitCommit: 8e59dd8d9032429c4f8defd4024ee791d9e06de8
        buildTime: 2000-01-23T04:56:07.000+00:00
        version: cassandra-sidecar 1.1.0
      properties:
        version:
          description: textual representation of Sidecar version
          example: cassandra-sidecar 1.1.0
          type: string
        buildTime:
          description: timestamp this Sidecar was built
          format: date-time
          type: string
        gitCommit:
          description: git commit hash this Sidecar was built from
          example: 8e59dd8d9032429c4f8defd4024ee791d9e06de8
          type: string
      type: object
    CassandraSchemaVersion:
      example:
        schemaVersion: 329319a5-cc1b-3db3-8001-c179b4063d04
      properties:
        schemaVersion:
          description: UUID representing a version of Cassandra node as reported by
            its StorageServiceMBean#getSchemaVersion
          example: 329319a5-cc1b-3db3-8001-c179b4063d04
          type: string
      type: object
    CassandraSchemaVersionException:
      properties:
        exception:
          type: object
      type: object
    CassandraStatus:
      example:
        nodeState: STARTING
      properties:
        nodeState:
          description: State of a Cassandra node as reported from StorageServiceMBean#getOperationMode
          enum:
          - STARTING
          - NORMAL
          - JOINING
          - LEAVING
          - DECOMMISSIONED
          - MOVING
          - DRAINING
          - DRAINED
          type: string
      type: object
    CassandraStatusException:
      properties:
        exception:
          type: object
      type: object
