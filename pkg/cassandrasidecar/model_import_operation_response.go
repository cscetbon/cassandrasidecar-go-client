/*
 * Instaclustr Cassandra Sidecar
 *
 * REST API for Cassandra Sidecar from Instaclustr
 *
 * API version: 1.1.0
 * Contact: support@instaclustr.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package cassandrasidecar
import (
	"time"
)

type ImportOperationResponse struct {
	// has to be set to 'import' 
	Type_ string `json:"type"`
	Keyspace string `json:"keyspace,omitempty"`
	Table string `json:"table,omitempty"`
	SourceDir string `json:"sourceDir"`
	KeepLevel bool `json:"keepLevel,omitempty"`
	KeepRepaired bool `json:"keepRepaired,omitempty"`
	NoVerify bool `json:"noVerify,omitempty"`
	NoVerifyTokens bool `json:"noVerifyTokens,omitempty"`
	NoInvalidateCaches bool `json:"noInvalidateCaches,omitempty"`
	// defaults to false, if true, noVerifyTokens, noInvalidateCaches and noVerify will be set to true automatically 
	Quick bool `json:"quick,omitempty"`
	ExtendedVerify bool `json:"extendedVerify,omitempty"`
	// unique identifier of an operation, a random id is assigned to each operation after  a request is submitted, from caller's perspective, an id is sent back as a response  to his request so he can further query state of that operation, referencing id, by operations/{id} endpoint 
	Id string `json:"id"`
	// state of an operation, operation might be in various states, PENDING - this operation is pending for being submitted. RUNNING - this operation is actively  doing its job, COMPLETED - this operation has finished successfully, CANCELLED -  this operation was interrupted while being run, FAILED - this operation has  finished errorneously 
	State string `json:"state"`
	// float from 0.0 to 1.0, 1.0 telling that operation is completed,  either successfully or with errors. 
	Progress string `json:"progress"`
	// timestamp telling when this operation was created on Sidecar's side 
	CreationTime time.Time `json:"creationTime"`
	// timestamp telling when this operation was started by Sidecar, if an operation  is created, it does not necessarily mean that it will be started right away,  in most cases it is the case but if e.g. ExecutorService is full on its working thread, an execution of an operation is postponed and start time is updated only after that 
	StartTime time.Time `json:"startTime,omitempty"`
	// timestamp telling when an operation has finished, irrelevant of its result, an  operation can be failed and it would still have this field populated. 
	CompletionTime time.Time `json:"completionTime,omitempty"`
	// This field contains serialized java.lang.Throwable in case this operation has failed 
	FailureCause *interface{} `json:"failureCause,omitempty"`
}
